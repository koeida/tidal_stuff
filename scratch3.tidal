cps (1/11)

hush

cps 1

d1  $ superimpose ((0.125 ~>) . (# up 5) . (# vibrato 1.5)) $ s "superpiano" # n "<a2 d3 fs3 <e3 e3 c3 e3>>"

solo $ d1 $ every 3 (const (s "lfhh:1")) $ every 2 rev $ striate "<64 32>" $ s "lfhh:1" # gain "1.2"

d2 $ fast 8 $ every 3 (0.25 <~)
   $ stack [ every 3 rev $ s "future(5,8)" # n "<0 1 2 3 4>*3"
           , s "bd(3,8)" # n "<0 1 2>"
           , every 5 (fast 2) $ s "hh*8"
           , every 3 (fast 2) $ slow 2 $ s "~ sd ~ sd"
           , s "<[[cp cp] cp cp? cp] [~ [cp cp] ~ cp]>" # n (run 10) # gain (scale 0.75 1 (slow 2 sine))
           ] |*| gain 0.85

d3 $ every 3 (slow 4) $ fast 8 $ s "dist"
  # n "<0 1 2 3 4>" # cut "1"
  # speed "<0.75 0.9 1 0.75>"
  # gain 0.75

t2 (jumpIn' 1) $ every 3 (0.25 <~) $ every 2 (stut 3 1.1 0.25)
  $ s "supersquare(5,8)"
  # n ("<0 5 7 3 0>" - 7)
  # gain (scale 0.95 1.1 (fast 4 sine))

d1 $ every 5 (0.25 <~) $ every 3 (0.125 <~) $ fast 2 $ every 3 rev
  $ s "<supersquare*16 supersquare(5,8) supersquare(3,8)>" # n ((run 8) - "<12 20 15>/8")

  hush


-------------------------

cps 0.1

d1 $ fast (scale 1 1.25 (slow 8 sine)) $ stack
  [ striate' 512 (1/64) $ s "funeral:0*2"
  , striate' 320 (1/32) $ s "funeral:0*1"
  ]
  # gain 0.9 # lpf (scale 1500 3500 (slow 4 sine))


hush



d2 $ fast 16 $ s "super808*<1 1 1 2 4>" # n 0
  # lpf 500
  # gain 1.0

d3 $ fast 8 $ s "hh*8"

d1 $ degradeBy 0.25 $ foldEvery [2,3,5,7] (0.25 <~) $ rev $ striate 64 $ sound "idum" # lpf (scale 500 2500 (slow 4 sine))

d2 $ fast 4 $ s "super808*<1 1 1 2 4>" # n 0
  # lpf 500
  # gain 1



d4 $ every 2 (fast 2) $ fast 4 $ s "hh*8"

cps 1

hush

d1 $ gain "1 <1 1 1 [1*8]>" # s "gabba:4" # cut "1" # speed 1 # accelerate "0.5"



d1 $ rev $ slow "<4 8>" $ striate "<8 16 16 32>" $ s "tupe*<1 1 1 2>"
  # gain 1.2
  # lpf (scale 1000 3500 (slow 4 sine))


d2 $ whenmod 8 4 (const (s "super808*<4 8>" # n 0 # cut 1)) $
     stack [ s "bd(<3 5 7 12>,8)" # n "{0 1 2 3 4 5 6 7 8}%4"
           , every 4 (const $ s "<[cp*4] [cp*2 cp cp cp] [cp*2]>" # gain 0.75 # n "<0 1 2 3 4>/2")
              $ s "<[hh*<4 2>] [hh*2? hh hh hh] [hh*2? hh hh*2? hh]>"
           ] |*| gain 1 # cut 1

d3 $ whenmod 12 8 (const (gain "1(<4 5 7>,8)"
                            # s "superchip"
                            # n "<e4 g4 a4 <c4 b4>>/4"
                            # lpf (scale 500 3500 (slow 4 sine)) # lpq (scale 0 0.2 (slow 8 sine))))
  $ gain "1(<1 2 4>,4)" # s "superchip" # n "<e4 g4 a4 <c4 b4>>/8"
  # lpf (scale 500 3500 (slow 4 sine))
  # lpq (scale 0 0.2 (slow 8 sine))



d1 $ rev $ slow "<4 8>" $ striate "<8 16 16 32>" $ s "tupe*<1 1 1 2>"
    # gain 1.2
    # lpf (scale 1000 3500 (slow 4 sine))

hush

d1 $ slow 2 $

cps (-1)

cps 1

hush

d1 $ stack [ s "bd(<3 5 7>,8)" # n "{0 1 2 3 4 5 6 7 8}%4" # gain 1
           , every 3 (fast 2) $ every 4 (const $ s "<[cp*4] [cp*2 cp cp cp] [cp*2]>" # gain 1 # n "<0 1 2 3 4>/2")
              $ s "<[hh*<4 2>] [hh*2? hh hh hh] [hh*2? hh hh*2? hh]>"
           , every 2 (fast 2) $ s "<[~ sd ~ sd] [~ sd ~ sd] [~ sd ~ sd] [~ ~ ~ sd*2]>" # n "0 1 2 3"
           , whenmod 8 4 (const $ s "super808*<1 1 2 4>" # n 0 # cut 2) $ s "~"
           , s "tupe::4*2" # gain 2
           ] |*| gain 1

d1 $ s "tupe:4"

d1 $  --"0.75 0.85 0.95 1.1"


cps (-1)

cps 1


hush

d1 $ seqP [ (0, 3, s "<tupe ~ ~>") ]

d1 $ seqP "<tupe ~ ~>"

hush

cps (-1)

cps 1

d1 $ seqP [ (0,  4, slow 2 $ s "tupe:1" # gain 2)
          , (4,  8, slow "<8 4>" $ striate 32 $ s "tupe:1" # gain 2)
          , (8, 16, s "super808*<1 1 2 4>" # n 0 # cut 2)
          , (12, 16, s "tupe:4(<1 1 3 5>,8)" # gain 2 # cut 1)
          , (16, 17, s "super808" # n 0 # cut 2)
          , (16, 20, slow 4 $ (striate 64 $ s "print:10") # gain (scale 0 1.5 (slow 2 sine)))
          , (20, 256, whenmod 16 14 (const $ slow "<4>" $ every 5 rev $ striate "<8 16>" $ s "<tupe tupe tupe:1>"
                                           # gain 1.5 # orbit 2 # cut 3)
                      $ stack [ s "bd(<3 5 7>,8)" # n "{0 1 2 3 4 5 6 7 8}%4" # gain 1
                              , every 3 (fast 2) $ every 4 (const $ s "future*4" # gain 1 # n "<0 1 2 3 4>/2")
                                $ s "<[hh*<4 2>] [hh*2? hh hh hh] [hh*2? hh hh*2? hh]>"
                              , whenmod 12 10 (const $ s "~") $ every 3 rev $ every 2 (fast 2) $ s "<[cp*2 sd cp sd] [cp sd cp sd] [cp*2 sd cp sd] [~ ~ ~ sd*2]>" # n "0 1 2 3"
                              , whenmod 8 4 (const $ s "808bd*<1 1 2 4>" # n 0 # cut 2 # gain 1) $ s "~"
                              , whenmod 12 10 (const $ s "print*<4 8>" # n "{0 1 2 3 4 5 6 7 8 9 10 11 12}%4" # cut 3 # gain 0.85)
                                     $ slow 4 $ n (run 16) # s "print" # speed 0.5 # gain 1 # cut 3
                              , whenmod 12 10 (const (s "~")) $ s "super808" # n 0 # gain 1.5 # lpf 1000
                              ] |*| gain 1)
           , (256, 259, s "<tupe ~ ~>")]





            d1 $ whenmod 16 14 (const $ slow "<4 8>" $ striate "<8 16 16 32>" $ s "<[tupe*<1 2>][tupe:1*<1 2>]>"
                                 # gain 1.75 # cut 1)
               $ stack [ whenmod 8 4 (const (s "super808*<1 1 2 4>" # n 0 # cut 1)) $
                           stack [ s "bd(<3 5 7>,8)" # n "{0 1 2 3 4 5 6 7 8}%4" # gain 1.2
                                 , every 3 (fast 2) $ every 4 (const $ s "<[cp*4] [cp*2 cp cp cp] [cp*2]>" # gain 1 # n "<0 1 2 3 4>/2")
                                    $ s "<[hh*<4 2>] [hh*2? hh hh hh] [hh*2? hh hh*2? hh]>"
                                 , every 2 (fast 2) $ s "<[~ sd ~ sd] [~ sd ~ sd] [~ sd ~ sd] [~ ~ ~ sd*2]>" # n "0 1 2 3"
                                 ] |*| gain 1.2 # cut 1
                       , whenmod 12 8 (const (gain "1(<4 5 7>,8)"
                                          # s "superchip"
                                          # n "<e3 g3 a3 <c3 b3>>"
                                          # lpf (scale 500 3500 (slow 4 sine)) # lpq (scale 0 0.2 (slow 8 sine))))
                            $ gain "1(<1 2 4>,4)" # s "superchip" # n "<e3 g3 a3 <c3 b3>>" # voice 0.25
                            # lpf (scale 500 3500 (slow 4 sine))
                            # lpq (scale 0 0.2 (slow 8 sine))
                            # voice 0.25
                      , slow 256 $ rev $ striate' 1024 (1/128) $ s "funeral:1*2"
                          # gain (scale 0.75 1.25 (slow 4 sine)) # lpf (scale 500 2500 (slow 4 sine))
                          # delay 1
                          # delaytime 0.75
                          # delayfeedback 0
                       ]
