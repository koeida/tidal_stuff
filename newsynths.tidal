d1 $ jux (rev) $ slow "<2 1>" $ n (arp "<down converge diverge>" "<a'm9'8 e'7sus4'8>") # s "superhammond" # legato 1
    # voice 0.1
    # lpf (range 500 5000 (slow 4 sine))

d2 $ superimpose (fast 2 . (0.25 ~>)) $ every 3 rev $ fast 1 $ s "supervibe*<4 8 4 16>" # legato 1 # n ("<0 2 5 7>" - 14) # velocity 1.2

d3 $ every 3 (const $ s "superhoover" # voice 0.1 # slide "<-7 -5 -2 0>" # legato 1.5 # lpf 500 # lpq 0.2 # gain 1.25) $ s ""

d4 $ stack [ s "99bd*<1 1 1 4 1 1 1 8>" # gain 1.5
           , s "99hh*<4 8 4 16>" # gain "{1.25 1 1.1 0.9}%8"
           , s "99sd(3,8)"
           , s "~ cp/2" # gain 1.2
           ]

hush

--------------

-- linger (play only _dec_ of a pattern)

setcps 0.5

d1 $ stack [ every 4 (fast 2) $ s "superhex(5,8,2)" # n "c2" # gain 0.8 # pan sine # lpf 500
           , s "superhat*<8 16>" # lpf (range 1000 2000 (fast 2 sine)) # sustain 0.5
           , jux rev $ superimpose (hurry "<1 2 1 4>") $ iter 8 $ n (arp "<up down diverge>" "<a'm9'8 e'7sus4'8>") # s "supersaw" # legato "{0.25 0.125 0.5 0.25}%8" # gain 0.8 # voice 0.1
           ] --jux rev $

d2 $ (slow 8 $ rev $ striate 64 $ s "love") # lpf (range 500 6000 (slow 4 sine))

hush

-- This is a thing

setcps 0.5

d3 $ jux ((# speed 0.5) . rev) $ (loopAt 4 $ degradeBy 0.25 $ striate 64 $ s "idum")
  # lpf (range 500 6000 tri) # lpq (range 0 0.2 (slow 4 sine))

d4 $ fast 2 $ stack
           [ s "<99hh*<8 16 8> 99hh(3,8)>"
           , s "99bd(<3 5>,8,<0 2 5>)"
           , s "99sd*<1 2 1 4> ~"
           , s "cp ~"]

d4 $ s ""

----

d1 $ n (arp "<up down>" "<d'minor'9 c'minor'9>")
 # s "superchip" # voice 0.3 # lpf 1500
 # gain 1

d2 $ stack [s "99hh*8"]

hush

-------

hush

d1 $  every 4 (const $ s "superhoover" # voice 0.1 # slide "<-7 -5 -2 0>" # legato 4 # lpf 500 # lpq 0.2 # gain 1.25) $ s ""


----------

hush

"-7 .. 0"

d1 $  n (scale "minor" ("-7 .. 0")) # sound "superpiano"

--

-- note comes in
-- if note is (0,5,7) then major
-- if note is (2,4,9,11) then minor
-- otherwise empty list?

do


tonic = 36

hush

-- PATTERNS ARE FUNCTORS, APPLICATIVE, AND MONADIC

foober :: Pattern Int -> Pattern p
foober n = if fmap (== 0)

foo n
    | elem ((n !! 0) - tonic) [0,5,7] = parseBP_E $ (show (n !! 0) ++ "'maj'8")
    | elem ((n !! 0) - tonic) [2,4,9,11] = parseBP_E $ (show (n !! 0) ++ "'min'8")
    | otherwise = parseBP_E ""

foominor n
  | elem ((n !! 0) - tonic) [3,4,8,10] = parseBP_E $ (show (n !! 0) ++ "'maj'8")
  | elem ((n !! 0) - tonic) [0,2,5,7] = parseBP_E $ (show (n !! 0) ++ "'min'8")
  | otherwise = parseBP_E ""


foo [36]

:t parseBP_E

hush

parseBP_E

:t parseBP_E

fmap (+1) (parseBP_E "<1 2 5>")

:info Pattern Int

:t foo

:t cI

hush

foo = (cP "[]" "notes") -- + (cP "[]" "key")

:t cP

:t cP


-- THIS IS THE THINGIE FOR SUMMER WORKING

setcps (20/60)



hush

--7/11

setcps (50/60)

d1 $ slow 2 $ n (arp "<up down downup>" ((segment 1 $ cP "[]" "notes") + (segment 1 $ cP "[]" "key")))
  # s "superchip"
  # voice 0.1
  # legato 1
  # room 0.25
  # orbit 1

d3 $ whenmod 32 16 (rev . (|+ n 12))
  $ every 3 (slow 2)
  $ whenmod 8 4 (off 0.125 (|+ n "<5 7>"))
  $ fast 2 $ n "c4 [~ e4/4]" # s "superchip"
  |*| gain "{1.1 0.9 1}%2"
  # lpf 1000
  |+| n "{0 <0 5 3>}%2"
  # lpq 0.125
  # orbit 1
  # room 0.125
  # legato "{2 1 2 1.5}%2"

d2 $ whenmod 32 16 (const $ s "99bd [~ 99bd]" |*| gain 1.25 # room 0.125)
   $ whenmod 8 6 (const $ chunk 12 (# n 2) $ s "99hh*4" |*| gain "1.15 0.9 1.1 1") $
     stack [ every 8 (fast 2) $ chunk 4 (# speed 0.95) $ s "99bd:2(3,8)" |*| gain "1 1 1.2"
           , chunk 12 (# n 2) $ s "99hh*<4 4 4 8>" |*| gain "1.15 0.9 1.1 1"
           , s "~ cp/2" # lpf 1000
           ] |*| gain 1.25

hush

-- END 7/11


-- FURBY FILE

setcps (50/60)

hush

do
  let furby = striate "<4 8 16>" $ (s "incoming:1" # speed "<1.25 1.125 1 0.75>")
  let metalnotes = n "0*<1 2> 3 1? <4 5>"
  let dropper s = whenmod 24 16 (const $ s)
  d1 $ whenmod 16 12 (const $ furby # room 0.25 # orbit 0) $
       stack [ juxBy 0.5 (rev . (# speed 0.75)) $ furby
             , s "bottle(3,8,<2 3 4>)" # n (run 8)
             , every 3 (fast 2 . rev) $ s "haw:5 <haw:2 haw:3>"
             , off 0.125 (rev . (# speed 0.75) . (# lpf 1000)) $ metalnotes # s "metal"
             , every 4 (rev . striate 16) $ s "d:2"
             , s "99bd:8(3,8)" |*| gain "1.1 1 1.25"
             , s "99hh*<4 4 8 3 4 16>" |*| gain "1.1 1 0.9 1"
             ] # room 0.25 # orbit 0
  d1 $ stack [ dropper (s "") $ furby |*| speed 1.25
             , dropper (s "") $ s "99bd*2"
             , dropper (s "") $ s "~ 99sd/2"
             , dropper (s "") $ s "~ 99cp/2"
             , dropper (s "99bd [~ 99bd]") $ every 3 (fast 2) $ s "99hh*4"
             , whenmod 24 16 (rev . slow 2) $ juxBy 0.5 (fast 2 . rev) $ slow 2 $ s "supersquare*<8 16>" # n ("<5 3 0>" + "<0 7 12>/4") # lpf 500 # voice 0.2 # lpq 0.125
             ] # room 0.25 # orbit 0





-- THIS IS SOME INDUSTRIAL NONSENSE

d2 $ s "" -- loopAt 1 $ (s "cosmicg:1" # speed 0.5) # lpf 500

d3 $ stut 2 0.75 (1/16) $ loopAt 1 $ gain "1.1 1 1.2 0.9" # s "control:2" # n "0 0 0 <0 1>"

d4 $ stut 4 0.75 (1/8) $ gain "0.5 0.75 0.95 1.25" # s "industrial:1"

d5 $ s "industrial(5,8,<2 3 5>)" # n 2 # gain 1.2

d6 $ s "99bd" # gain 1.5

hush

-- END INDUSTRIAL NONSENSE

d1 $ juxBy 0.5 ((# legato 1)) $ off 0.125 (|- 12) $ off 0.125 (|+ 7) $ n "<c*2 a(3,8) f(3,8,2) e*2>"
  # sound "superchip" # voice 0.6 # lpf 1500 # lpq 0.125
  # legato 0.5

setcps (30/60)

d1 $ chunk 4 (|- n 7) $ off 0.125 (|+ 5) $ arp "<pinkyup>" $ n "<c'maj'4 e'min'4 f'maj'4>"
  # s "superchip" # voice 0.6
  # legato 0.75
  # sz 0.9
  # room 0.3

d1 $ juxBy 0.5 (rev) $ every 2 ("<0.25 0.5 0.125>" <~) $ s "bd*2 [[~ lt] sn:3] l1:1 [h1 mt*2]"
  # squiz "<1 2.5 2>"
  # sz 0.5
  # orbit 1

d1 $ n "0 <0 4> [2 0] [2 3]" # sound "feel" # speed 1.5

hush

d2 $ "" --n (arp "<updown>" ((cP "[]" "notes") + "'maj'7")) # s "supersaw"

d3 $ s "99bd"

a'm9'8
hush

:t cI

hush

--d1 $ n (arp "<updown diverge downup diverge>" ((cP "[]" "notes") + "'maj'8")) # s "superchip" # legato 1

hush

setcps (140/60/4)

do
  let mods = whenmod 12 11 (const $ s "") $ whenmod 24 12 (juxBy 0.5 ((|-| n 7) . rev)) $ whenmod 12 8 (rev . slow 2)
  let ns = n (arp "<updown thumbup>" "<e'min'9>")
  let es = s "supersaw" # legato 1 # gain 0.8 # lpf (range 500 1500 (slow 12 sine)) # lpq 0.2 # voice 0.8 # delay 0.5 # delaytime 0.5
  d1 $ mods $ ns # es

hush

-- This is what we did

setcps (140/60/4)

hush

do
  let s1 = whenmod 12 11 (const $ s "") $ whenmod 24 12 (juxBy 0.5 ((|-| n 7) . rev)) $ whenmod 12 8 (rev . slow 2)  $ n (arp "<updown thumbup>" "<e'min'9>") # s "supersaw" # legato 1 # gain 0.8 # lpf (range 500 1500 (slow 12 sine)) # lpq 0.2 # voice 0.8  # delay 0.5 # delaytime 0.5
  let bd1 = whenmod 12 8 (const $ s "") $ s "<99bd(5,8) 99bd*<2 4 2 8>>" |*| gain 1.2
  let sdcp = stack [s "~ 99sd/2", s "~ cp/2"]
  let hh1 = whenmod 12 10 (const $ s "<~ [cc*8 ~]>" # gain "[[0.5 0.75 0.85 1] 1]") $ fast "<2 4 1>" $ s "99hh*<4 8 4 16>" |*| gain "1.1 0.9 1 0.85" |*| gain 1.2
  let s2n = n (arp "<updown>" "<e'min'9>")
  let s1drums = stack [sdcp, hh1, bd1] # orbit 1
  let s2 = jux (rev) $ slow 2 $ s2n # s "superchip"  # legato 0.5 # voice 0.5 # lpf 2500 # lpq 0.1
  let s2drums = whenmod 8 6 (const $ s "") $ stack [s "99hh*4"]
  let s3n = n (arp "<thumbup>" "<c'min'9>")
  let s3 = palindrome $ slow 2 $ s3n # s "supersaw" # legato 1 # voice 0.2 |*| gain 0.9 # lpf 2500
  let s3drums = stack [s "99bd*<1 1 4 1 1 8 1> ~", s "~ 99sd/2", s "~ 99cp"] |*| gain 1.2
  d1 $ seqPLoop [ (0, 48, stack [s1, s1drums]) --summer says this one is a minor
                , (48, 56, stack [s2, s2drums])
                --, (32, 56, stack [s1, s1drums])
                ]

---------------

hush

--this thing was pretty ok
setcps 0.45

 --[pinkyup]
d1 $ whenmod 12 8 (# lpf 750) $ every 3 (fast 2) $ juxBy 0.5 (rev . (|-| n 7)) $ n (arp "<thumbup updown>" "c'dom7'8")
  # (s "supersquare" # voice 0.1
  # orbit 1 # lpf (range 1000 2500 (slow 8 sine))) # lpq 0.1 # room 0.25

d3 $ slow 4 $ n "<c d>" # s "supersquare" # voice 0.2 # lpf 1500 # gain 1.1 |-| n 14

d2 $ stack [ every 4 (fast 4) $ s "99bd ~" |*| gain 1.3
           , s "~ 99sd/2"
           , fast "<1 <1 2> 1 <2 4>>" $ s "99hh 99hh <99hh 99hh 99hh:2> 99hh" |*| gain "1.1 0.9 1 0.95"
           ] # room 0.25 |*| gain 1.2




hush

  d2 $ s ""

                d2 $ stack
                  [ whenmod 12 8 (const $ s "") $ s "<99bd(5,8) 99bd*<2 4 2 8>>" |*| gain 1.2
                  , s "~ 99sd/2"
                  , s "~ cp/2"
                  , whenmod 12 10 (const $ s "<~ [cc*8 ~]>" # gain "[[0.5 0.75 0.85 1] 1]") $ fast "<2 4 1>" $ s "99hh*<4 8 4 16>" |*| gain "1.1 0.9 1 0.85" |*| gain 1.2
                  ] # room 0.25 # orbit 1


----
-- "and a book"

setcps 0.60

d1 $ whenmod 12 11 (const $ s "")
  $ whenmod 24 12 (juxBy 0.5 ((|-| n 7) . rev))
  $ whenmod 12 8 (rev . slow 2)
  $ n (arp "<updown thumbup>" "<e'min'9>")
  # s "supersaw" # legato 1 # gain 0.8
  # lpf (range 500 1500 (slow 12 sine))
  # lpq 0.2
  # voice 0.8
  # delay 0.5
  # delaytime 0.5

d2 $ stack
  [ whenmod 12 8 (const $ s "") $ s "<99bd(5,8) 99bd*<2 4 2 8>>" |*| gain 1.2
  , s "~ 99sd/2"
  , s "~ cp/2"
  , whenmod 12 10 (const $ s "<~ [cc*8 ~]>" # gain "[[0.5 0.75 0.85 1] 1]") $ fast "<2 4 1>" $ s "99hh*<4 8 4 16>" |*| gain "1.1 0.9 1 0.85" |*| gain 1.2
  ] # room 0.25 # orbit 1

d3 $ whenmod 12 8 ((# lpf 2000) . (# lpq 0.2)) $ slow 4 $ rev $ striate 32 $ s "funeral" |*| gain 1.2 # lpf 500 # cut 1

hush

d4 $ s ""

--------------

hush

setcps (120/60/4)

d1 $ whenmod 12 8 (fast 2 . rev)
  $ juxBy 0.5 (rev .  (# s "supersquare") . (|*| gain 0.95))
  $ n (arp "<thumbupdown>" ("<0 0 5 7>" + "'min'9"))
    # s "superhammond" # legato 1.5 # gain 1
    # voice 0.8
    |*| gain 0.8

d2 $ juxBy 0.5 (fast 2 . (# speed 0.75)) $ sometimes rev $ slow 4 $ striate "<64>" $ s "crow" |*| gain 1.5

d2 $ s ""

d3 $ stack [ s "<99bd*4 [~ 99sd*<2 4 1>] 99bd*8 ~>" # n 2 |*| gain 1.25
           , s "<99hh*<16 32 16 8> [99hh*4 ~]>"
           ] |*| gain 1.2

-----

setcps (100/60/4)

do
  let love = zoom (0.0,0.125) $ rev $ striate' 256 (1/16) $ s "love ~" # cut 1
  d1 $ whenmod 8 4 (slow 2) $ juxBy 0.5 (rev . slow 2) $ slow 4 $ love # gain 1.25
  d2 $ whenmod 8 4 (const $ s "[99bd,<~ 99hh*8 ~ [99hh*16 [99hh*4 ~]]>]")
    $ s "99bd*8" # cut 1

hush


-----------------

hush

setcps (100/60/4)

d1 $ striate 32 $ s "funeral:1" # gain (range 0.75 1.25 (slow 4 sine))


---------------
hush

-- Surprisingly nice when summer is playing keyboard over this

d1 $ juxBy 0.5 (rev . (# speed 0.5)) $ whenmod 12 8 (# speed 1.25) $ chunk 4 (hurry 0.5)
  $ s "print(5,8)" # n "0 9 1 8 9" # cut 1

d2 $ s "99bd [~ 99bd]" # n 1 |*| gain "1.1 <1.3 1.5>"

d3 $ gain "[1 1 1.2][1 1 0.9][1 1 1.2][1 1 0.8*<2 1>]" # s "99hh"

d4 $ slow 2 $ every 3 rev $ striate "<16 4 16 8>" $ s "crow"
  # gain 1.1
  # n "<0 1 2>"
  # speed "<1 1 1 0.9>"


-------------

hush

setcps (93/60/4)

do
  d1 $ stut 3 0.1 (-1/16) $ sound "[hh ~ hh ~]*4"
  d2 $ sound "[bd ~ ~ ~] [rs ~ ~ bd] ~ [rs ~ ~ <~ bd>]"
  d3 $ every 4 (|+| up 1) $ sound "arp/2" # cut 1
  d4 $ stut' 2 (1/8) (|*| speed (choose [1, -0.5, 2])) $ sound "arp:1(3,8,2)" # end (slow 2 $ range 0.0125 0.025 $ sine) # gain 0.1
  d5 $ every 4 (|+| up 1) $ n (choose [0 .. 5]) >| sound "[bass1] [bass1 _ ~ bass1] ~ [bass1 _ ~ <~ bass1>]" # up "1 [8 1] 1 8"

------

d1 $ s "stomp:1(5,8)" # gain 1.5

hush
