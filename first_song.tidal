
cps (-1)

setcps 0.75

hush


-- drums on the first part are suck exept for the whoosh
-- for the second part, the drums are better, but
-- make the snares whoosh in dubbylike from zero gain to full gain in the current silence in [~ 99sd*<1 2>]

do
  d1 $ seqPLoop [ (0, 24, slow "<2 4 8>" $ striate "<32 64>" $ s "nloop:3" # gain (range 0.75 2 (fast 2 sine)))
               , (25, 27, s "<99snap*2 [99snap*2 ~ 99snap*2 ~]>" # gain 1)
               , (27, 51, rev $ slow "<2 4 2 8>" $ striate "<64 128>" $ s "nloop:3" # gain (range 0.75 2 (fast 2 sine)) # lpf (range 500 6000 (slow 8 sine)) # lpq 0.2)
               , (51, 53, s "<99snap*2 [99snap*2 ~ 99snap*2 ~]>" # gain 1)]
  let tappy x = superimpose ((x ~>) . (degradeBy 0.75) . (# gain 1.1))
  let tapback x = superimpose ((x <~) . (degradeBy 0.85) . (# gain 1.1) . (# n 8))
  d2 $ seqPLoop [(0,24, whenmod 6 4 (const $ rev $ striate "<4 8 16 8 32>" $ s "<bassdm ~>" # gain 1.5)
                  $ stack [ tapback (1/16) $ every 3 (slow 2) $ s "99hh 99hh 99hh:3 99hh" # gain 1
                          , every 5 (rev) $ s "99bd:2*<2 4 2 8>"
                          , tappy (1/8) $ every 3 (fast 2) $ s "<[~ 99sd][~ 99sd*2 ~ 99sd]>"
                          ])
                ,(25, 27, s "")
                ,(27, 51, stack [ every 3 (slow 2) $ s "<[99bd*<1 1 1 4> ~][99bd 99bd*<1 2>]>" # cut 2
                                , ((1/128) ~>) $ slow 2 $ within (0, 0.5) (# gain (range 0 1.4 (fast 0.5 saw))) $ s "[[~ 99sd*<4 8>] [99sd*<4 8> ~]] 99sd*<1 2>" # cut 2
                                , s "99hh*<4>" # gain "1.2 0.9 1 0.8"
                                ])
                ,(51, 53, s "")]


d1 $ stack [ every 3 (slow 2) $ s "<[99bd*<1 1 1 4> ~][99bd 99bd*<1 2>]>" # cut 2
           , ((1/128) ~>) $ slow 2 $ s "<[~ 99sd*<1 2>]>" # cut 2
           , s "99hh*<4>" # gain "1.2 0.9 1 0.8"
           ]

d1 $ s "<99bd(5,8) 99bd(3,8) 99bd(5,8) 99bd*2>"

d2 $ rev $ slow "<2 4 2 8>" $ striate "<64 128>" $ s "nloop:3" # gain (scale 0.75 2 (fast 2 sine)) # lpf (scale 500 6000 (slow 8 sine)) # lpq 0.2

--alt:

d1 $ s ""

d3 $ rev $ slow "<4 8 16>" $ degradeBy 0.1 $ striate "<32 64>" $ s "nloop:3" # gain (scale 0.75 2 (fast 2 sine)) # cut 2

d2 $ whenmod 12 10 (const $ s "<[99snap*4][99snap ~ 99snap*2 ~]>") $
     stack [ every 3 (const $ s "99bd:1(5,8)") $ gain "<[1/3 [~ 1] [~ ~ 1 ~] 1/3][1*<4 8>]>" # s "99bd:1"
           , superimpose (((1/8) <~) . (# speed (choose [0.9, 0.8, 0.75])) . (degradeBy 0.25)) $ gain "~ 1 ~ ~" # s "99sd:14"
           , superimpose (((1/16) <~) . (# n (choose [0, 1, 2, 3])) . (degradeBy 0.75)) $ s "99snap*<4 8 4 8 4 16>" # pan sine
           ]



hush

d1 $ slow 2 $ stack [ s "99bd(7,8)" # cut 1
                    , s "99sd(5,16)" # cut 1
                    ]
